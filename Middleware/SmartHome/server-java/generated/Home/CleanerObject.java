//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Home.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Home;

public class CleanerObject implements java.lang.Cloneable,
                                      java.io.Serializable
{
    public int id;

    public boolean onTask;

    public double battery;

    public double dustBagLevel;

    public String message;

    public java.util.List<Logger> logger;

    public CleanerObject()
    {
        this.message = "";
    }

    public CleanerObject(int id, boolean onTask, double battery, double dustBagLevel, String message, java.util.List<Logger> logger)
    {
        this.id = id;
        this.onTask = onTask;
        this.battery = battery;
        this.dustBagLevel = dustBagLevel;
        this.message = message;
        this.logger = logger;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        CleanerObject r = null;
        if(rhs instanceof CleanerObject)
        {
            r = (CleanerObject)rhs;
        }

        if(r != null)
        {
            if(this.id != r.id)
            {
                return false;
            }
            if(this.onTask != r.onTask)
            {
                return false;
            }
            if(this.battery != r.battery)
            {
                return false;
            }
            if(this.dustBagLevel != r.dustBagLevel)
            {
                return false;
            }
            if(this.message != r.message)
            {
                if(this.message == null || r.message == null || !this.message.equals(r.message))
                {
                    return false;
                }
            }
            if(this.logger != r.logger)
            {
                if(this.logger == null || r.logger == null || !this.logger.equals(r.logger))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::Home::CleanerObject");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, id);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, onTask);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, battery);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, dustBagLevel);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, message);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, logger);
        return h_;
    }

    public CleanerObject clone()
    {
        CleanerObject c = null;
        try
        {
            c = (CleanerObject)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeInt(this.id);
        ostr.writeBool(this.onTask);
        ostr.writeDouble(this.battery);
        ostr.writeDouble(this.dustBagLevel);
        ostr.writeString(this.message);
        LoggerSeqHelper.write(ostr, this.logger);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.id = istr.readInt();
        this.onTask = istr.readBool();
        this.battery = istr.readDouble();
        this.dustBagLevel = istr.readDouble();
        this.message = istr.readString();
        this.logger = LoggerSeqHelper.read(istr);
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, CleanerObject v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public CleanerObject ice_read(com.zeroc.Ice.InputStream istr)
    {
        CleanerObject v = new CleanerObject();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<CleanerObject> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, CleanerObject v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<CleanerObject> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(CleanerObject.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final CleanerObject _nullMarshalValue = new CleanerObject();

    /** @hidden */
    public static final long serialVersionUID = 292241844L;
}
