//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Home.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Home;

public class StoveObject implements java.lang.Cloneable,
                                    java.io.Serializable
{
    public int id;

    public StoveType type;

    public boolean isWorking;

    public double heat;

    public String message;

    public StoveObject()
    {
        this.type = StoveType.TILED;
        this.message = "";
    }

    public StoveObject(int id, StoveType type, boolean isWorking, double heat, String message)
    {
        this.id = id;
        this.type = type;
        this.isWorking = isWorking;
        this.heat = heat;
        this.message = message;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        StoveObject r = null;
        if(rhs instanceof StoveObject)
        {
            r = (StoveObject)rhs;
        }

        if(r != null)
        {
            if(this.id != r.id)
            {
                return false;
            }
            if(this.type != r.type)
            {
                if(this.type == null || r.type == null || !this.type.equals(r.type))
                {
                    return false;
                }
            }
            if(this.isWorking != r.isWorking)
            {
                return false;
            }
            if(this.heat != r.heat)
            {
                return false;
            }
            if(this.message != r.message)
            {
                if(this.message == null || r.message == null || !this.message.equals(r.message))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::Home::StoveObject");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, id);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, type);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isWorking);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, heat);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, message);
        return h_;
    }

    public StoveObject clone()
    {
        StoveObject c = null;
        try
        {
            c = (StoveObject)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeInt(this.id);
        StoveType.ice_write(ostr, this.type);
        ostr.writeBool(this.isWorking);
        ostr.writeDouble(this.heat);
        ostr.writeString(this.message);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.id = istr.readInt();
        this.type = StoveType.ice_read(istr);
        this.isWorking = istr.readBool();
        this.heat = istr.readDouble();
        this.message = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, StoveObject v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public StoveObject ice_read(com.zeroc.Ice.InputStream istr)
    {
        StoveObject v = new StoveObject();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<StoveObject> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, StoveObject v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<StoveObject> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(StoveObject.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final StoveObject _nullMarshalValue = new StoveObject();

    /** @hidden */
    public static final long serialVersionUID = -1433878672L;
}
