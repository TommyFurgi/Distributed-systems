//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Home.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Home;

public interface Stove extends Device
{
    void heatWater(int stoveId, double temp, com.zeroc.Ice.Current current)
        throws DangerException,
               DeviceInUseException,
               InvalidArgumentException;

    boolean isWorking(int stoveId, com.zeroc.Ice.Current current);

    double getHeatLevel(int stoveId, com.zeroc.Ice.Current current);

    void setHeatLevel(int stoveId, double heat, com.zeroc.Ice.Current current)
        throws DeviceInUseException,
               InvalidArgumentException;

    StoveType getStoveType(int stoveId, com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Home::Device",
        "::Home::Stove",
        "::Ice::Object"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Home::Stove";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_heatWater(Stove obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_stoveId;
        double iceP_temp;
        iceP_stoveId = istr.readInt();
        iceP_temp = istr.readDouble();
        inS.endReadParams();
        obj.heatWater(iceP_stoveId, iceP_temp, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_isWorking(Stove obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_stoveId;
        iceP_stoveId = istr.readInt();
        inS.endReadParams();
        boolean ret = obj.isWorking(iceP_stoveId, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getHeatLevel(Stove obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_stoveId;
        iceP_stoveId = istr.readInt();
        inS.endReadParams();
        double ret = obj.getHeatLevel(iceP_stoveId, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeDouble(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setHeatLevel(Stove obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_stoveId;
        double iceP_heat;
        iceP_stoveId = istr.readInt();
        iceP_heat = istr.readDouble();
        inS.endReadParams();
        obj.setHeatLevel(iceP_stoveId, iceP_heat, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getStoveType(Stove obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_stoveId;
        iceP_stoveId = istr.readInt();
        inS.endReadParams();
        StoveType ret = obj.getStoveType(iceP_stoveId, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        StoveType.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "checkState",
        "getHeatLevel",
        "getStoveType",
        "heatWater",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "isWorking",
        "setHeatLevel"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return Device._iceD_checkState(this, in, current);
            }
            case 1:
            {
                return _iceD_getHeatLevel(this, in, current);
            }
            case 2:
            {
                return _iceD_getStoveType(this, in, current);
            }
            case 3:
            {
                return _iceD_heatWater(this, in, current);
            }
            case 4:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 5:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 6:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 7:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 8:
            {
                return _iceD_isWorking(this, in, current);
            }
            case 9:
            {
                return _iceD_setHeatLevel(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
