# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `Home.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Home
_M_Home = Ice.openModule('Home')
__name__ = 'Home'

if 'Logger' not in _M_Home.__dict__:
    _M_Home.Logger = Ice.createTempClass()
    class Logger(object):
        def __init__(self, date='', message=''):
            self.date = date
            self.message = message

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.date)
            _h = 5 * _h + Ice.getHash(self.message)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Home.Logger):
                return NotImplemented
            else:
                if self.date is None or other.date is None:
                    if self.date != other.date:
                        return (-1 if self.date is None else 1)
                else:
                    if self.date < other.date:
                        return -1
                    elif self.date > other.date:
                        return 1
                if self.message is None or other.message is None:
                    if self.message != other.message:
                        return (-1 if self.message is None else 1)
                else:
                    if self.message < other.message:
                        return -1
                    elif self.message > other.message:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Home._t_Logger)

        __repr__ = __str__

    _M_Home._t_Logger = IcePy.defineStruct('::Home::Logger', Logger, (), (
        ('date', (), IcePy._t_string),
        ('message', (), IcePy._t_string)
    ))

    _M_Home.Logger = Logger
    del Logger

if '_t_LoggerSeq' not in _M_Home.__dict__:
    _M_Home._t_LoggerSeq = IcePy.defineSequence('::Home::LoggerSeq', (), _M_Home._t_Logger)

if 'DangerOperation' not in _M_Home.__dict__:
    _M_Home.DangerOperation = Ice.createTempClass()
    class DangerOperation(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    DangerOperation.OVERHEAT = DangerOperation("OVERHEAT", 0)
    DangerOperation.EXHAUSTION = DangerOperation("EXHAUSTION", 1)
    DangerOperation.OVERFLOW = DangerOperation("OVERFLOW", 2)
    DangerOperation._enumerators = { 0:DangerOperation.OVERHEAT, 1:DangerOperation.EXHAUSTION, 2:DangerOperation.OVERFLOW }

    _M_Home._t_DangerOperation = IcePy.defineEnum('::Home::DangerOperation', DangerOperation, (), DangerOperation._enumerators)

    _M_Home.DangerOperation = DangerOperation
    del DangerOperation

if 'DeviceType' not in _M_Home.__dict__:
    _M_Home.DeviceType = Ice.createTempClass()
    class DeviceType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    DeviceType.NONE = DeviceType("NONE", 0)
    DeviceType.STOVE = DeviceType("STOVE", 1)
    DeviceType.CLEANER = DeviceType("CLEANER", 2)
    DeviceType.FRIDGE = DeviceType("FRIDGE", 3)
    DeviceType._enumerators = { 0:DeviceType.NONE, 1:DeviceType.STOVE, 2:DeviceType.CLEANER, 3:DeviceType.FRIDGE }

    _M_Home._t_DeviceType = IcePy.defineEnum('::Home::DeviceType', DeviceType, (), DeviceType._enumerators)

    _M_Home.DeviceType = DeviceType
    del DeviceType

if 'DangerException' not in _M_Home.__dict__:
    _M_Home.DangerException = Ice.createTempClass()
    class DangerException(Ice.UserException):
        def __init__(self, whatOp=_M_Home.DangerOperation.OVERHEAT, message=''):
            self.whatOp = whatOp
            self.message = message

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Home::DangerException'

    _M_Home._t_DangerException = IcePy.defineException('::Home::DangerException', DangerException, (), False, None, (
        ('whatOp', (), _M_Home._t_DangerOperation, False, 0),
        ('message', (), IcePy._t_string, False, 0)
    ))
    DangerException._ice_type = _M_Home._t_DangerException

    _M_Home.DangerException = DangerException
    del DangerException

if 'InvalidArgumentException' not in _M_Home.__dict__:
    _M_Home.InvalidArgumentException = Ice.createTempClass()
    class InvalidArgumentException(Ice.UserException):
        def __init__(self, message=''):
            self.message = message

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Home::InvalidArgumentException'

    _M_Home._t_InvalidArgumentException = IcePy.defineException('::Home::InvalidArgumentException', InvalidArgumentException, (), False, None, (('message', (), IcePy._t_string, False, 0),))
    InvalidArgumentException._ice_type = _M_Home._t_InvalidArgumentException

    _M_Home.InvalidArgumentException = InvalidArgumentException
    del InvalidArgumentException

if 'DeviceInUseException' not in _M_Home.__dict__:
    _M_Home.DeviceInUseException = Ice.createTempClass()
    class DeviceInUseException(Ice.UserException):
        def __init__(self, message=''):
            self.message = message

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Home::DeviceInUseException'

    _M_Home._t_DeviceInUseException = IcePy.defineException('::Home::DeviceInUseException', DeviceInUseException, (), False, None, (('message', (), IcePy._t_string, False, 0),))
    DeviceInUseException._ice_type = _M_Home._t_DeviceInUseException

    _M_Home.DeviceInUseException = DeviceInUseException
    del DeviceInUseException

if 'StoveType' not in _M_Home.__dict__:
    _M_Home.StoveType = Ice.createTempClass()
    class StoveType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    StoveType.TILED = StoveType("TILED", 0)
    StoveType.GAS = StoveType("GAS", 1)
    StoveType.PUMP = StoveType("PUMP", 2)
    StoveType._enumerators = { 0:StoveType.TILED, 1:StoveType.GAS, 2:StoveType.PUMP }

    _M_Home._t_StoveType = IcePy.defineEnum('::Home::StoveType', StoveType, (), StoveType._enumerators)

    _M_Home.StoveType = StoveType
    del StoveType

if 'StoveObject' not in _M_Home.__dict__:
    _M_Home.StoveObject = Ice.createTempClass()
    class StoveObject(object):
        def __init__(self, id=0, type=_M_Home.StoveType.TILED, isWorking=False, heat=0.0, message=''):
            self.id = id
            self.type = type
            self.isWorking = isWorking
            self.heat = heat
            self.message = message

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_Home.StoveObject):
                return NotImplemented
            else:
                if self.id != other.id:
                    return False
                if self.type != other.type:
                    return False
                if self.isWorking != other.isWorking:
                    return False
                if self.heat != other.heat:
                    return False
                if self.message != other.message:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_Home._t_StoveObject)

        __repr__ = __str__

    _M_Home._t_StoveObject = IcePy.defineStruct('::Home::StoveObject', StoveObject, (), (
        ('id', (), IcePy._t_int),
        ('type', (), _M_Home._t_StoveType),
        ('isWorking', (), IcePy._t_bool),
        ('heat', (), IcePy._t_double),
        ('message', (), IcePy._t_string)
    ))

    _M_Home.StoveObject = StoveObject
    del StoveObject

if 'CleanerObject' not in _M_Home.__dict__:
    _M_Home.CleanerObject = Ice.createTempClass()
    class CleanerObject(object):
        def __init__(self, id=0, onTask=False, battery=0.0, dustBagLevel=0.0, message='', logger=None):
            self.id = id
            self.onTask = onTask
            self.battery = battery
            self.dustBagLevel = dustBagLevel
            self.message = message
            self.logger = logger

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_Home.CleanerObject):
                return NotImplemented
            else:
                if self.id != other.id:
                    return False
                if self.onTask != other.onTask:
                    return False
                if self.battery != other.battery:
                    return False
                if self.dustBagLevel != other.dustBagLevel:
                    return False
                if self.message != other.message:
                    return False
                if self.logger != other.logger:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_Home._t_CleanerObject)

        __repr__ = __str__

    _M_Home._t_CleanerObject = IcePy.defineStruct('::Home::CleanerObject', CleanerObject, (), (
        ('id', (), IcePy._t_int),
        ('onTask', (), IcePy._t_bool),
        ('battery', (), IcePy._t_double),
        ('dustBagLevel', (), IcePy._t_double),
        ('message', (), IcePy._t_string),
        ('logger', (), _M_Home._t_LoggerSeq)
    ))

    _M_Home.CleanerObject = CleanerObject
    del CleanerObject

if '_t_TemperatureSeq' not in _M_Home.__dict__:
    _M_Home._t_TemperatureSeq = IcePy.defineSequence('::Home::TemperatureSeq', (), IcePy._t_double)

if 'FridgeObject' not in _M_Home.__dict__:
    _M_Home.FridgeObject = Ice.createTempClass()
    class FridgeObject(Ice.Value):
        def __init__(self, id=0, temperature=0.0, energyUsage=0.0, message='', temperatureHistory=None):
            self.id = id
            self.temperature = temperature
            self.energyUsage = energyUsage
            self.message = message
            self.temperatureHistory = temperatureHistory

        def ice_id(self):
            return '::Home::FridgeObject'

        @staticmethod
        def ice_staticId():
            return '::Home::FridgeObject'

        def __str__(self):
            return IcePy.stringify(self, _M_Home._t_FridgeObject)

        __repr__ = __str__

    _M_Home._t_FridgeObject = IcePy.defineValue('::Home::FridgeObject', FridgeObject, -1, (), False, False, None, (
        ('id', (), IcePy._t_int, False, 0),
        ('temperature', (), IcePy._t_double, False, 0),
        ('energyUsage', (), IcePy._t_double, False, 0),
        ('message', (), IcePy._t_string, False, 0),
        ('temperatureHistory', (), _M_Home._t_TemperatureSeq, False, 0)
    ))
    FridgeObject._ice_type = _M_Home._t_FridgeObject

    _M_Home.FridgeObject = FridgeObject
    del FridgeObject

if 'DeviceInfo' not in _M_Home.__dict__:
    _M_Home.DeviceInfo = Ice.createTempClass()
    class DeviceInfo(object):
        def __init__(self, message=''):
            self.message = message

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.message)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Home.DeviceInfo):
                return NotImplemented
            else:
                if self.message is None or other.message is None:
                    if self.message != other.message:
                        return (-1 if self.message is None else 1)
                else:
                    if self.message < other.message:
                        return -1
                    elif self.message > other.message:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Home._t_DeviceInfo)

        __repr__ = __str__

    _M_Home._t_DeviceInfo = IcePy.defineStruct('::Home::DeviceInfo', DeviceInfo, (), (('message', (), IcePy._t_string),))

    _M_Home.DeviceInfo = DeviceInfo
    del DeviceInfo

if '_t_StoveObjectSeq' not in _M_Home.__dict__:
    _M_Home._t_StoveObjectSeq = IcePy.defineSequence('::Home::StoveObjectSeq', (), _M_Home._t_StoveObject)

if '_t_CleanerObjectSeq' not in _M_Home.__dict__:
    _M_Home._t_CleanerObjectSeq = IcePy.defineSequence('::Home::CleanerObjectSeq', (), _M_Home._t_CleanerObject)

if '_t_FridgeObjectSeq' not in _M_Home.__dict__:
    _M_Home._t_FridgeObjectSeq = IcePy.defineSequence('::Home::FridgeObjectSeq', (), _M_Home._t_FridgeObject)

if 'DeviceSummary' not in _M_Home.__dict__:
    _M_Home.DeviceSummary = Ice.createTempClass()
    class DeviceSummary(object):
        def __init__(self, stoves=None, cleaners=None, fridges=None):
            self.stoves = stoves
            self.cleaners = cleaners
            self.fridges = fridges

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_Home.DeviceSummary):
                return NotImplemented
            else:
                if self.stoves != other.stoves:
                    return False
                if self.cleaners != other.cleaners:
                    return False
                if self.fridges != other.fridges:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_Home._t_DeviceSummary)

        __repr__ = __str__

    _M_Home._t_DeviceSummary = IcePy.defineStruct('::Home::DeviceSummary', DeviceSummary, (), (
        ('stoves', (), _M_Home._t_StoveObjectSeq),
        ('cleaners', (), _M_Home._t_CleanerObjectSeq),
        ('fridges', (), _M_Home._t_FridgeObjectSeq)
    ))

    _M_Home.DeviceSummary = DeviceSummary
    del DeviceSummary

_M_Home._t_Device = IcePy.defineValue('::Home::Device', Ice.Value, -1, (), False, True, None, ())

if 'DevicePrx' not in _M_Home.__dict__:
    _M_Home.DevicePrx = Ice.createTempClass()
    class DevicePrx(Ice.ObjectPrx):

        def checkState(self, deviceId, context=None):
            return _M_Home.Device._op_checkState.invoke(self, ((deviceId, ), context))

        def checkStateAsync(self, deviceId, context=None):
            return _M_Home.Device._op_checkState.invokeAsync(self, ((deviceId, ), context))

        def begin_checkState(self, deviceId, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Device._op_checkState.begin(self, ((deviceId, ), _response, _ex, _sent, context))

        def end_checkState(self, _r):
            return _M_Home.Device._op_checkState.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Home.DevicePrx.ice_checkedCast(proxy, '::Home::Device', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Home.DevicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Home::Device'
    _M_Home._t_DevicePrx = IcePy.defineProxy('::Home::Device', DevicePrx)

    _M_Home.DevicePrx = DevicePrx
    del DevicePrx

    _M_Home.Device = Ice.createTempClass()
    class Device(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Home::Device', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Home::Device'

        @staticmethod
        def ice_staticId():
            return '::Home::Device'

        def checkState(self, deviceId, current=None):
            raise NotImplementedError("servant method 'checkState' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Home._t_DeviceDisp)

        __repr__ = __str__

    _M_Home._t_DeviceDisp = IcePy.defineClass('::Home::Device', Device, (), None, ())
    Device._ice_type = _M_Home._t_DeviceDisp

    Device._op_checkState = IcePy.Operation('checkState', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), _M_Home._t_DeviceInfo, False, 0), ())

    _M_Home.Device = Device
    del Device

_M_Home._t_Stove = IcePy.defineValue('::Home::Stove', Ice.Value, -1, (), False, True, None, ())

if 'StovePrx' not in _M_Home.__dict__:
    _M_Home.StovePrx = Ice.createTempClass()
    class StovePrx(_M_Home.DevicePrx):

        def heatWater(self, stoveId, temp, context=None):
            return _M_Home.Stove._op_heatWater.invoke(self, ((stoveId, temp), context))

        def heatWaterAsync(self, stoveId, temp, context=None):
            return _M_Home.Stove._op_heatWater.invokeAsync(self, ((stoveId, temp), context))

        def begin_heatWater(self, stoveId, temp, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Stove._op_heatWater.begin(self, ((stoveId, temp), _response, _ex, _sent, context))

        def end_heatWater(self, _r):
            return _M_Home.Stove._op_heatWater.end(self, _r)

        def isWorking(self, stoveId, context=None):
            return _M_Home.Stove._op_isWorking.invoke(self, ((stoveId, ), context))

        def isWorkingAsync(self, stoveId, context=None):
            return _M_Home.Stove._op_isWorking.invokeAsync(self, ((stoveId, ), context))

        def begin_isWorking(self, stoveId, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Stove._op_isWorking.begin(self, ((stoveId, ), _response, _ex, _sent, context))

        def end_isWorking(self, _r):
            return _M_Home.Stove._op_isWorking.end(self, _r)

        def getHeatLevel(self, stoveId, context=None):
            return _M_Home.Stove._op_getHeatLevel.invoke(self, ((stoveId, ), context))

        def getHeatLevelAsync(self, stoveId, context=None):
            return _M_Home.Stove._op_getHeatLevel.invokeAsync(self, ((stoveId, ), context))

        def begin_getHeatLevel(self, stoveId, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Stove._op_getHeatLevel.begin(self, ((stoveId, ), _response, _ex, _sent, context))

        def end_getHeatLevel(self, _r):
            return _M_Home.Stove._op_getHeatLevel.end(self, _r)

        def setHeatLevel(self, stoveId, heat, context=None):
            return _M_Home.Stove._op_setHeatLevel.invoke(self, ((stoveId, heat), context))

        def setHeatLevelAsync(self, stoveId, heat, context=None):
            return _M_Home.Stove._op_setHeatLevel.invokeAsync(self, ((stoveId, heat), context))

        def begin_setHeatLevel(self, stoveId, heat, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Stove._op_setHeatLevel.begin(self, ((stoveId, heat), _response, _ex, _sent, context))

        def end_setHeatLevel(self, _r):
            return _M_Home.Stove._op_setHeatLevel.end(self, _r)

        def getStoveType(self, stoveId, context=None):
            return _M_Home.Stove._op_getStoveType.invoke(self, ((stoveId, ), context))

        def getStoveTypeAsync(self, stoveId, context=None):
            return _M_Home.Stove._op_getStoveType.invokeAsync(self, ((stoveId, ), context))

        def begin_getStoveType(self, stoveId, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Stove._op_getStoveType.begin(self, ((stoveId, ), _response, _ex, _sent, context))

        def end_getStoveType(self, _r):
            return _M_Home.Stove._op_getStoveType.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Home.StovePrx.ice_checkedCast(proxy, '::Home::Stove', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Home.StovePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Home::Stove'
    _M_Home._t_StovePrx = IcePy.defineProxy('::Home::Stove', StovePrx)

    _M_Home.StovePrx = StovePrx
    del StovePrx

    _M_Home.Stove = Ice.createTempClass()
    class Stove(_M_Home.Device):

        def ice_ids(self, current=None):
            return ('::Home::Device', '::Home::Stove', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Home::Stove'

        @staticmethod
        def ice_staticId():
            return '::Home::Stove'

        def heatWater(self, stoveId, temp, current=None):
            raise NotImplementedError("servant method 'heatWater' not implemented")

        def isWorking(self, stoveId, current=None):
            raise NotImplementedError("servant method 'isWorking' not implemented")

        def getHeatLevel(self, stoveId, current=None):
            raise NotImplementedError("servant method 'getHeatLevel' not implemented")

        def setHeatLevel(self, stoveId, heat, current=None):
            raise NotImplementedError("servant method 'setHeatLevel' not implemented")

        def getStoveType(self, stoveId, current=None):
            raise NotImplementedError("servant method 'getStoveType' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Home._t_StoveDisp)

        __repr__ = __str__

    _M_Home._t_StoveDisp = IcePy.defineClass('::Home::Stove', Stove, (), None, (_M_Home._t_DeviceDisp,))
    Stove._ice_type = _M_Home._t_StoveDisp

    Stove._op_heatWater = IcePy.Operation('heatWater', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_double, False, 0)), (), None, (_M_Home._t_DangerException, _M_Home._t_InvalidArgumentException, _M_Home._t_DeviceInUseException))
    Stove._op_isWorking = IcePy.Operation('isWorking', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    Stove._op_getHeatLevel = IcePy.Operation('getHeatLevel', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_double, False, 0), ())
    Stove._op_setHeatLevel = IcePy.Operation('setHeatLevel', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_double, False, 0)), (), None, (_M_Home._t_InvalidArgumentException, _M_Home._t_DeviceInUseException))
    Stove._op_getStoveType = IcePy.Operation('getStoveType', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), _M_Home._t_StoveType, False, 0), ())

    _M_Home.Stove = Stove
    del Stove

_M_Home._t_Cleaner = IcePy.defineValue('::Home::Cleaner', Ice.Value, -1, (), False, True, None, ())

if 'CleanerPrx' not in _M_Home.__dict__:
    _M_Home.CleanerPrx = Ice.createTempClass()
    class CleanerPrx(_M_Home.DevicePrx):

        def vacuumRoom(self, cleanerId, context=None):
            return _M_Home.Cleaner._op_vacuumRoom.invoke(self, ((cleanerId, ), context))

        def vacuumRoomAsync(self, cleanerId, context=None):
            return _M_Home.Cleaner._op_vacuumRoom.invokeAsync(self, ((cleanerId, ), context))

        def begin_vacuumRoom(self, cleanerId, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Cleaner._op_vacuumRoom.begin(self, ((cleanerId, ), _response, _ex, _sent, context))

        def end_vacuumRoom(self, _r):
            return _M_Home.Cleaner._op_vacuumRoom.end(self, _r)

        def getBatteryLevel(self, cleanerId, context=None):
            return _M_Home.Cleaner._op_getBatteryLevel.invoke(self, ((cleanerId, ), context))

        def getBatteryLevelAsync(self, cleanerId, context=None):
            return _M_Home.Cleaner._op_getBatteryLevel.invokeAsync(self, ((cleanerId, ), context))

        def begin_getBatteryLevel(self, cleanerId, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Cleaner._op_getBatteryLevel.begin(self, ((cleanerId, ), _response, _ex, _sent, context))

        def end_getBatteryLevel(self, _r):
            return _M_Home.Cleaner._op_getBatteryLevel.end(self, _r)

        def getBagLevel(self, cleanerId, context=None):
            return _M_Home.Cleaner._op_getBagLevel.invoke(self, ((cleanerId, ), context))

        def getBagLevelAsync(self, cleanerId, context=None):
            return _M_Home.Cleaner._op_getBagLevel.invokeAsync(self, ((cleanerId, ), context))

        def begin_getBagLevel(self, cleanerId, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Cleaner._op_getBagLevel.begin(self, ((cleanerId, ), _response, _ex, _sent, context))

        def end_getBagLevel(self, _r):
            return _M_Home.Cleaner._op_getBagLevel.end(self, _r)

        def returnToBase(self, cleanerId, context=None):
            return _M_Home.Cleaner._op_returnToBase.invoke(self, ((cleanerId, ), context))

        def returnToBaseAsync(self, cleanerId, context=None):
            return _M_Home.Cleaner._op_returnToBase.invokeAsync(self, ((cleanerId, ), context))

        def begin_returnToBase(self, cleanerId, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Cleaner._op_returnToBase.begin(self, ((cleanerId, ), _response, _ex, _sent, context))

        def end_returnToBase(self, _r):
            return _M_Home.Cleaner._op_returnToBase.end(self, _r)

        def emptyBag(self, cleanerId, context=None):
            return _M_Home.Cleaner._op_emptyBag.invoke(self, ((cleanerId, ), context))

        def emptyBagAsync(self, cleanerId, context=None):
            return _M_Home.Cleaner._op_emptyBag.invokeAsync(self, ((cleanerId, ), context))

        def begin_emptyBag(self, cleanerId, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Cleaner._op_emptyBag.begin(self, ((cleanerId, ), _response, _ex, _sent, context))

        def end_emptyBag(self, _r):
            return _M_Home.Cleaner._op_emptyBag.end(self, _r)

        def hasTask(self, cleanerId, context=None):
            return _M_Home.Cleaner._op_hasTask.invoke(self, ((cleanerId, ), context))

        def hasTaskAsync(self, cleanerId, context=None):
            return _M_Home.Cleaner._op_hasTask.invokeAsync(self, ((cleanerId, ), context))

        def begin_hasTask(self, cleanerId, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Cleaner._op_hasTask.begin(self, ((cleanerId, ), _response, _ex, _sent, context))

        def end_hasTask(self, _r):
            return _M_Home.Cleaner._op_hasTask.end(self, _r)

        def getLogs(self, cleanerId, context=None):
            return _M_Home.Cleaner._op_getLogs.invoke(self, ((cleanerId, ), context))

        def getLogsAsync(self, cleanerId, context=None):
            return _M_Home.Cleaner._op_getLogs.invokeAsync(self, ((cleanerId, ), context))

        def begin_getLogs(self, cleanerId, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Cleaner._op_getLogs.begin(self, ((cleanerId, ), _response, _ex, _sent, context))

        def end_getLogs(self, _r):
            return _M_Home.Cleaner._op_getLogs.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Home.CleanerPrx.ice_checkedCast(proxy, '::Home::Cleaner', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Home.CleanerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Home::Cleaner'
    _M_Home._t_CleanerPrx = IcePy.defineProxy('::Home::Cleaner', CleanerPrx)

    _M_Home.CleanerPrx = CleanerPrx
    del CleanerPrx

    _M_Home.Cleaner = Ice.createTempClass()
    class Cleaner(_M_Home.Device):

        def ice_ids(self, current=None):
            return ('::Home::Cleaner', '::Home::Device', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Home::Cleaner'

        @staticmethod
        def ice_staticId():
            return '::Home::Cleaner'

        def vacuumRoom(self, cleanerId, current=None):
            raise NotImplementedError("servant method 'vacuumRoom' not implemented")

        def getBatteryLevel(self, cleanerId, current=None):
            raise NotImplementedError("servant method 'getBatteryLevel' not implemented")

        def getBagLevel(self, cleanerId, current=None):
            raise NotImplementedError("servant method 'getBagLevel' not implemented")

        def returnToBase(self, cleanerId, current=None):
            raise NotImplementedError("servant method 'returnToBase' not implemented")

        def emptyBag(self, cleanerId, current=None):
            raise NotImplementedError("servant method 'emptyBag' not implemented")

        def hasTask(self, cleanerId, current=None):
            raise NotImplementedError("servant method 'hasTask' not implemented")

        def getLogs(self, cleanerId, current=None):
            raise NotImplementedError("servant method 'getLogs' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Home._t_CleanerDisp)

        __repr__ = __str__

    _M_Home._t_CleanerDisp = IcePy.defineClass('::Home::Cleaner', Cleaner, (), None, (_M_Home._t_DeviceDisp,))
    Cleaner._ice_type = _M_Home._t_CleanerDisp

    Cleaner._op_vacuumRoom = IcePy.Operation('vacuumRoom', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_Home._t_DangerException, _M_Home._t_DeviceInUseException))
    Cleaner._op_getBatteryLevel = IcePy.Operation('getBatteryLevel', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_double, False, 0), ())
    Cleaner._op_getBagLevel = IcePy.Operation('getBagLevel', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_double, False, 0), ())
    Cleaner._op_returnToBase = IcePy.Operation('returnToBase', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_Home._t_DeviceInUseException,))
    Cleaner._op_emptyBag = IcePy.Operation('emptyBag', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_Home._t_DeviceInUseException, _M_Home._t_DangerException))
    Cleaner._op_hasTask = IcePy.Operation('hasTask', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    Cleaner._op_getLogs = IcePy.Operation('getLogs', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), _M_Home._t_LoggerSeq, False, 0), ())

    _M_Home.Cleaner = Cleaner
    del Cleaner

_M_Home._t_Fridge = IcePy.defineValue('::Home::Fridge', Ice.Value, -1, (), False, True, None, ())

if 'FridgePrx' not in _M_Home.__dict__:
    _M_Home.FridgePrx = Ice.createTempClass()
    class FridgePrx(_M_Home.DevicePrx):

        def changeTemperature(self, fridgeId, temp, context=None):
            return _M_Home.Fridge._op_changeTemperature.invoke(self, ((fridgeId, temp), context))

        def changeTemperatureAsync(self, fridgeId, temp, context=None):
            return _M_Home.Fridge._op_changeTemperature.invokeAsync(self, ((fridgeId, temp), context))

        def begin_changeTemperature(self, fridgeId, temp, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Fridge._op_changeTemperature.begin(self, ((fridgeId, temp), _response, _ex, _sent, context))

        def end_changeTemperature(self, _r):
            return _M_Home.Fridge._op_changeTemperature.end(self, _r)

        def getCurrentTemperature(self, fridgeId, context=None):
            return _M_Home.Fridge._op_getCurrentTemperature.invoke(self, ((fridgeId, ), context))

        def getCurrentTemperatureAsync(self, fridgeId, context=None):
            return _M_Home.Fridge._op_getCurrentTemperature.invokeAsync(self, ((fridgeId, ), context))

        def begin_getCurrentTemperature(self, fridgeId, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Fridge._op_getCurrentTemperature.begin(self, ((fridgeId, ), _response, _ex, _sent, context))

        def end_getCurrentTemperature(self, _r):
            return _M_Home.Fridge._op_getCurrentTemperature.end(self, _r)

        def getEnergyUsage(self, cleanerId, context=None):
            return _M_Home.Fridge._op_getEnergyUsage.invoke(self, ((cleanerId, ), context))

        def getEnergyUsageAsync(self, cleanerId, context=None):
            return _M_Home.Fridge._op_getEnergyUsage.invokeAsync(self, ((cleanerId, ), context))

        def begin_getEnergyUsage(self, cleanerId, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Fridge._op_getEnergyUsage.begin(self, ((cleanerId, ), _response, _ex, _sent, context))

        def end_getEnergyUsage(self, _r):
            return _M_Home.Fridge._op_getEnergyUsage.end(self, _r)

        def getTemperatureHistory(self, fridgeId, context=None):
            return _M_Home.Fridge._op_getTemperatureHistory.invoke(self, ((fridgeId, ), context))

        def getTemperatureHistoryAsync(self, fridgeId, context=None):
            return _M_Home.Fridge._op_getTemperatureHistory.invokeAsync(self, ((fridgeId, ), context))

        def begin_getTemperatureHistory(self, fridgeId, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Fridge._op_getTemperatureHistory.begin(self, ((fridgeId, ), _response, _ex, _sent, context))

        def end_getTemperatureHistory(self, _r):
            return _M_Home.Fridge._op_getTemperatureHistory.end(self, _r)

        def setEcoMode(self, fridgeId, mode, context=None):
            return _M_Home.Fridge._op_setEcoMode.invoke(self, ((fridgeId, mode), context))

        def setEcoModeAsync(self, fridgeId, mode, context=None):
            return _M_Home.Fridge._op_setEcoMode.invokeAsync(self, ((fridgeId, mode), context))

        def begin_setEcoMode(self, fridgeId, mode, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Fridge._op_setEcoMode.begin(self, ((fridgeId, mode), _response, _ex, _sent, context))

        def end_setEcoMode(self, _r):
            return _M_Home.Fridge._op_setEcoMode.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Home.FridgePrx.ice_checkedCast(proxy, '::Home::Fridge', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Home.FridgePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Home::Fridge'
    _M_Home._t_FridgePrx = IcePy.defineProxy('::Home::Fridge', FridgePrx)

    _M_Home.FridgePrx = FridgePrx
    del FridgePrx

    _M_Home.Fridge = Ice.createTempClass()
    class Fridge(_M_Home.Device):

        def ice_ids(self, current=None):
            return ('::Home::Device', '::Home::Fridge', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Home::Fridge'

        @staticmethod
        def ice_staticId():
            return '::Home::Fridge'

        def changeTemperature(self, fridgeId, temp, current=None):
            raise NotImplementedError("servant method 'changeTemperature' not implemented")

        def getCurrentTemperature(self, fridgeId, current=None):
            raise NotImplementedError("servant method 'getCurrentTemperature' not implemented")

        def getEnergyUsage(self, cleanerId, current=None):
            raise NotImplementedError("servant method 'getEnergyUsage' not implemented")

        def getTemperatureHistory(self, fridgeId, current=None):
            raise NotImplementedError("servant method 'getTemperatureHistory' not implemented")

        def setEcoMode(self, fridgeId, mode, current=None):
            raise NotImplementedError("servant method 'setEcoMode' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Home._t_FridgeDisp)

        __repr__ = __str__

    _M_Home._t_FridgeDisp = IcePy.defineClass('::Home::Fridge', Fridge, (), None, (_M_Home._t_DeviceDisp,))
    Fridge._ice_type = _M_Home._t_FridgeDisp

    Fridge._op_changeTemperature = IcePy.Operation('changeTemperature', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_double, False, 0)), (), None, (_M_Home._t_InvalidArgumentException,))
    Fridge._op_getCurrentTemperature = IcePy.Operation('getCurrentTemperature', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_double, False, 0), ())
    Fridge._op_getEnergyUsage = IcePy.Operation('getEnergyUsage', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_double, False, 0), ())
    Fridge._op_getTemperatureHistory = IcePy.Operation('getTemperatureHistory', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), _M_Home._t_TemperatureSeq, False, 0), ())
    Fridge._op_setEcoMode = IcePy.Operation('setEcoMode', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0)), (), None, ())

    _M_Home.Fridge = Fridge
    del Fridge

_M_Home._t_Controller = IcePy.defineValue('::Home::Controller', Ice.Value, -1, (), False, True, None, ())

if 'ControllerPrx' not in _M_Home.__dict__:
    _M_Home.ControllerPrx = Ice.createTempClass()
    class ControllerPrx(Ice.ObjectPrx):

        def getAllDevices(self, context=None):
            return _M_Home.Controller._op_getAllDevices.invoke(self, ((), context))

        def getAllDevicesAsync(self, context=None):
            return _M_Home.Controller._op_getAllDevices.invokeAsync(self, ((), context))

        def begin_getAllDevices(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Controller._op_getAllDevices.begin(self, ((), _response, _ex, _sent, context))

        def end_getAllDevices(self, _r):
            return _M_Home.Controller._op_getAllDevices.end(self, _r)

        def getDeviceType(self, deviceId, context=None):
            return _M_Home.Controller._op_getDeviceType.invoke(self, ((deviceId, ), context))

        def getDeviceTypeAsync(self, deviceId, context=None):
            return _M_Home.Controller._op_getDeviceType.invokeAsync(self, ((deviceId, ), context))

        def begin_getDeviceType(self, deviceId, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Controller._op_getDeviceType.begin(self, ((deviceId, ), _response, _ex, _sent, context))

        def end_getDeviceType(self, _r):
            return _M_Home.Controller._op_getDeviceType.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Home.ControllerPrx.ice_checkedCast(proxy, '::Home::Controller', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Home.ControllerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Home::Controller'
    _M_Home._t_ControllerPrx = IcePy.defineProxy('::Home::Controller', ControllerPrx)

    _M_Home.ControllerPrx = ControllerPrx
    del ControllerPrx

    _M_Home.Controller = Ice.createTempClass()
    class Controller(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Home::Controller', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Home::Controller'

        @staticmethod
        def ice_staticId():
            return '::Home::Controller'

        def getAllDevices(self, current=None):
            raise NotImplementedError("servant method 'getAllDevices' not implemented")

        def getDeviceType(self, deviceId, current=None):
            raise NotImplementedError("servant method 'getDeviceType' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Home._t_ControllerDisp)

        __repr__ = __str__

    _M_Home._t_ControllerDisp = IcePy.defineClass('::Home::Controller', Controller, (), None, ())
    Controller._ice_type = _M_Home._t_ControllerDisp

    Controller._op_getAllDevices = IcePy.Operation('getAllDevices', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_Home._t_DeviceSummary, False, 0), ())
    Controller._op_getDeviceType = IcePy.Operation('getDeviceType', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), _M_Home._t_DeviceType, False, 0), ())

    _M_Home.Controller = Controller
    del Controller

# End of module Home
